root(0,ROOT,went).
det(0,man,a).
nsubj(0,wanted,man).
nsubj:xsubj(0,buy,man).
nsubj(0,went,man).
ref(0,man,who).
acl:relcl(0,man,wanted).
mark(0,buy,to).
xcomp(0,wanted,buy).
det(0,ass,an).
dobj(0,buy,ass).
case(0,market,to).
nmod:to(0,went,market).
cc(0,market,and).
nmod:to(0,went,coming).
conj:and(0,market,coming).
case(0,beast,across).
det(0,beast,a).
amod(0,beast,likely-looking).
nmod:across(0,market,beast).
acl(0,beast,arranged).
case(0,owner,with).
det(0,owner,the).
nmod:with(0,arranged,owner).
mark(0,allowed,that).
nsubjpass(0,allowed,he).
nsubj:xsubj(0,take,he).
aux(0,allowed,should).
auxpass(0,allowed,be).
ccomp(0,arranged,allowed).
mark(0,take,to).
xcomp(0,allowed,take).
dobj(0,take,him).
advmod(0,take,home).
case(0,trial,on).
nmod:on(0,home,trial).
mark(0,see,to).
advcl:to(0,take,see).
dobj(0,like,what).
nsubj(0,like,he).
cop(0,like,was).
ccomp(0,see,like).
be(0,he,allowed).
take(0,he,him).
take_home(0,he,him).
root(1,ROOT,reached).
advmod(1,reached,when).
nsubj(1,reached,he).
dobj(1,reached,home).
nsubj(1,put,he).
acl:relcl(1,home,put).
dobj(1,put,him).
case(1,stable,into).
nmod:poss(1,stable,his).
nmod:into(1,put,stable).
case(1,asses,along).
mwe(1,along,with).
det(1,asses,the).
amod(1,asses,other).
nmod:along_with(1,put,asses).
put(1,he,him).
root(2,ROOT,took).
det(2,newcomer,the).
nsubj(2,took,newcomer).
nsubj(2,went,newcomer).
det(2,round,a).
compound(2,round,look).
dobj(2,took,round).
cc(2,took,and).
advmod(2,went,immediately).
conj:and(2,took,went).
cc(2,went,and).
conj:and(2,took,chose).
conj:and(2,went,chose).
det(2,place,a).
dobj(2,went,place).
case(2,beast,next).
mwe(2,next,to).
det(2,beast,the).
amod(2,beast,laziest).
cc(2,laziest,and).
conj:and(2,laziest,greediest).
amod(2,beast,greediest).
nmod:next_to(2,took,beast).
case(2,stable,in).
det(2,stable,the).
nmod:in(2,beast,stable).
took(2,newcomer,look_round).
took_look_round_next_to(2,newcomer,beast).
took_look_round_next_to(2,newcomer,beast_in_stable).
immediately_went(2,newcomer,place).
went(2,newcomer,place).
took_look_round_next_to(2,newcomer,laziest_beast).
took_look_round_next_to(2,newcomer,laziest_beast_in_stable).
is_in(2,laziest_beast,stable).
root(3,ROOT,saw).
advmod(3,saw,when).
det(3,master,the).
nsubj(3,saw,master).
nsubj(3,handed,master).
dobj(3,saw,this).
nsubj(3,put,he).
nsubj(3,led,he).
acl:relcl(3,this,put).
det(3,halter,a).
dobj(3,put,halter).
case(3,him,on).
nmod:on(3,put,him).
case(3,once,at).
nmod:at(3,put,once).
cc(3,put,and).
acl:relcl(3,this,led).
conj:and(3,put,led).
dobj(3,led,him).
compound:prt(3,led,off).
cc(3,saw,and).
conj:and(3,saw,handed).
dobj(3,handed,him).
case(3,owner,over).
case(3,owner,to).
nmod:poss(3,owner,his).
nmod:to(3,handed,owner).
advmod(3,handed,again).
put(3,he,halter).
led_off(3,he,him).
handed(3,master,him).
put_halter_at(3,he,once).
put_halter_on(3,he,him).
handed_again(3,master,him).
root(4,ROOT,deal).
det(4,latter,the).
nsubj(4,deal,latter).
cop(4,deal,was).
det(4,deal,a).
amod(4,deal,good).
acl:relcl(4,deal,surprised).
mark(4,seem,to).
xcomp(4,surprised,seem).
xcomp(4,seem,him).
advmod(4,soon,back).
advmod(4,soon,so).
advmod(4,seem,soon).
cc(4,surprised,and).
acl:relcl(4,deal,said).
conj:and(4,surprised,said).
was_deal(4,latter,surprised).
was_good_deal(4,latter,surprised).
was(4,latter,good).
root(5,ROOT,mean).
advmod(5,mean,why).
aux(5,mean,do).
nsubj(5,mean,you).
nsubj:xsubj(5,say,you).
mark(5,say,to).
xcomp(5,mean,say).
nsubj(5,tested,you).
aux(5,tested,have).
ccomp(5,say,tested).
xcomp(5,tested,him).
advmod(5,him,already).
do_mean(5,you,say).
root(6,ROOT,want).
nsubj(6,want,i).
nsubj:xsubj(6,put,i).
aux(6,want,do).
neg(6,want,n't).
mark(6,put,to).
xcomp(6,want,put).
dobj(6,put,him).
case(6,tests,through).
det(6,tests,any).
amod(6,tests,more).
nmod:through(6,put,tests).
root(7,ROOT,replied).
det(7,other,the).
nsubj(7,replied,other).
root(8,ROOT,see).
nsubj(8,see,i).
aux(8,see,could).
det(8,sort,what).
dobj(8,see,sort).
case(8,beast,of).
nmod:of(8,sort,beast).
nsubj(8,companion,he).
cop(8,companion,is).
case(8,companion,from).
det(8,companion,the).
acl:relcl(8,sort,companion).
nsubj(8,chose,he).
acl:relcl(8,companion,chose).
case(8,himself,for).
nmod:for(8,chose,himself).
chose_for(8,he,himself).
