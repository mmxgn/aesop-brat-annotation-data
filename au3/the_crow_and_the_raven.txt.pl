%% a crow was jealous of the raven because he was considered a bird of good omen and always attracted the attention of men who noted by his flight the good or evil course of future events.
% dependencies.
root(0,root,jealous).
det(0,crow,a).
nsubj(0,jealous,crow).
cop(0,jealous,be).
case(0,raven,of).
det(0,raven,the).
nmod:of(0,jealous,raven).
mark(0,consider,because).
nsubjpass(0,consider,he).
nsubjpass(0,attract,he).
auxpass(0,consider,be).
advcl:because(0,jealous,consider).
det(0,bird,a).
dobj(0,consider,bird).
case(0,omen,of).
amod(0,omen,good).
nmod:of(0,bird,omen).
cc(0,consider,and).
advmod(0,attract,always).
advcl:because(0,jealous,attract).
conj:and(0,consider,attract).
det(0,attention,the).
dobj(0,attract,attention).
case(0,man,of).
nmod:of(0,attention,man).
nsubj(0,note,man).
ref(0,man,who).
acl:relcl(0,man,note).
case(0,flight,by).
nmod:poss(0,flight,he).
nmod:by(0,note,flight).
det(0,course,the).
amod(0,course,good).
cc(0,good,or).
conj:or(0,good,evil).
amod(0,course,evil).
dobj(0,consider,course).
case(0,event,of).
amod(0,event,future).
nmod:of(0,course,event).
% relations.
be_consider(0,he,good_course_of_future_event).
be_consider(0,he,course).
be_consider(0,he,bird).
be(0,he,consider).
be(0,crow,jealous).
be_consider(0,he,bird_of_good_omen).
be_consider(0,he,course_of_future_event).
bird_of(0,he,good_omen).
bird_of(0,he,omen).
always_attract(0,he,attention).
good_course_of(0,he,future_event).
good_or_evil_course_of(0,bird,future_event).
be_consider(0,he,good_course).
be_jealous(0,crow,consider).
attract(0,he,attention).
be_consider(0,he,bird_of_omen).
course_of(0,he,future_event).
course_of(0,bird,future_event).
good_or_evil_course_of(0,he,future_event).
be_jealous_of(0,crow,raven).
good_course_of(0,bird,future_event).
%% seeing some travelers approaching the crow flew up into a tree and perching herself on one of the branches cawed as loudly as she could.
% dependencies.
root(1,root,see).
det(1,traveler,some).
dobj(1,see,traveler).
advcl(1,see,approach).
det(1,crow,the).
nsubj(1,fly,crow).
ccomp(1,approach,fly).
advmod(1,fly,up).
case(1,tree,into).
det(1,tree,a).
nmod:into(1,fly,tree).
cc(1,see,and).
conj:and(1,see,perch).
dobj(1,perch,herself).
case(1,one,on).
det:qmod(1,branch,one).
mwe(1,one,of).
det(1,branch,the).
nmod(1,perch,branch).
acl:relcl(1,branch,caw).
case(1,loudly,as).
advmod(1,caw,loudly).
mark(1,could,as).
nsubj(1,could,she).
advcl:as(1,caw,could).
% relations.
fly_into(1,crow,tree).
fly_up_into(1,crow,tree).
perch(1,traveler,herself).
%% the travelers turned towards the sound and wondered what it foreboded when one of them said to his companion.
% dependencies.
root(2,root,turn).
det(2,traveler,the).
nsubj(2,turn,traveler).
nsubj(2,wonder,traveler).
case(2,sound,towards).
det(2,sound,the).
nmod:towards(2,turn,sound).
cc(2,turn,and).
conj:and(2,turn,wonder).
dobj(2,forebode,what).
nsubj(2,forebode,it).
ccomp(2,wonder,forebode).
advmod(2,say,when).
det:qmod(2,they,one).
mwe(2,one,of).
nsubj(2,say,they).
advcl(2,forebode,say).
case(2,companion,to).
nmod:poss(2,companion,he).
nmod:to(2,say,companion).
% relations.
turn_towards(2,traveler,sound).
%% let us proceed on our journey my friend for it is only the caw of a crow and her cry you know is no omen.
% dependencies.
root(3,root,let).
nsubj(3,proceed,we).
ccomp(3,let,proceed).
case(3,journey,on).
nmod:poss(3,journey,we).
nmod:on(3,proceed,journey).
nmod:poss(3,friend,my).
nsubj(3,let,friend).
mark(3,caw,for).
nsubj(3,caw,it).
cop(3,caw,be).
advmod(3,caw,only).
det(3,caw,the).
dep(3,friend,caw).
case(3,crow,of).
det(3,crow,a).
nmod:of(3,caw,crow).
cc(3,crow,and).
nmod:poss(3,cry,she).
nmod:of(3,caw,cry).
conj:and(3,crow,cry).
nsubj(3,know,you).
acl:relcl(3,caw,know).
cop(3,omen,be).
neg(3,omen,no).
ccomp(3,know,omen).
% relations.
%% those who assume a character which does not belong to them only make themselves ridiculous.
% dependencies.
root(4,root,make).
nsubj(4,assume,those).
nsubj(4,make,those).
ref(4,those,who).
acl:relcl(4,those,assume).
det(4,character,a).
dobj(4,assume,character).
nsubj(4,belong,character).
ref(4,character,which).
aux(4,belong,do).
neg(4,belong,not).
acl:relcl(4,character,belong).
case(4,they,to).
nmod:to(4,belong,they).
advmod(4,belong,only).
nsubj(4,ridiculous,themselves).
xcomp(4,make,ridiculous).
% relations.
