root(0,ROOT,dead).
det(0,wolf,a).
amod(0,wolf,gaunt).
nsubj(0,dead,wolf).
cop(0,dead,was).
advmod(0,dead,almost).
case(0,hunger,with).
nmod:with(0,dead,hunger).
advmod(0,happened,when).
nsubj(0,happened,he).
nsubj:xsubj(0,meet,he).
advcl(0,dead,happened).
mark(0,meet,to).
xcomp(0,happened,meet).
det(0,house-dog,a).
dobj(0,meet,house-dog).
nsubj(0,passing,house-dog).
ref(0,house-dog,who).
aux(0,passing,was).
acl:relcl(0,house-dog,passing).
nmod(0,passing,by).
was(0,gaunt_wolf,dead).
was_dead_with(0,gaunt_wolf,hunger).
was(0,wolf,dead).
was(0,gaunt_wolf,almost_dead).
was_almost_dead_with(0,wolf,hunger).
was(0,wolf,almost_dead).
was_almost_dead_with(0,gaunt_wolf,hunger).
was_dead_with(0,wolf,hunger).
root(1,ROOT,cousin).
dep(1,cousin,ah).
root(2,ROOT,said).
det(2,dog,the).
nsubj(2,said,dog).
root(3,ROOT,knew).
nsubj(3,knew,i).
advmod(3,be,how).
nsubj(3,be,it).
aux(3,be,would).
ccomp(3,knew,be).
root(4,ROOT,be).
nmod:poss(4,life,your).
amod(4,life,irregular).
nsubj(4,be,life).
aux(4,be,will).
advmod(4,be,soon).
nsubj(4,ruin,the).
ccomp(4,be,ruin).
case(4,you,of).
nmod:of(4,ruin,you).
ruin_of(4,the,you).
root(5,ROOT,work).
advmod(5,work,why).
aux(5,work,do).
nsubj(5,work,you).
nsubj(5,get,you).
neg(5,work,not).
advmod(5,work,steadily).
mark(5,do,as).
nsubj(5,do,i).
advcl:as(5,work,do).
cc(5,work,and).
conj:and(5,work,get).
nmod:poss(5,food,your).
dobj(5,get,food).
advmod(5,get,regularly).
case(5,you,given).
case(5,you,to).
advcl:given(5,get,you).
get(5,you,your_food).
get_regularly(5,you,your_food).
root(6,ROOT,have).
nsubj(6,have,i).
aux(6,have,would).
neg(6,objection,no).
dobj(6,have,objection).
root(7,ROOT,said).
det(7,wolf,the).
nsubj(7,said,wolf).
root(8,ROOT,get).
mark(8,get,if).
nsubj(8,get,i).
aux(8,get,could).
advmod(8,get,only).
det(8,place,a).
dobj(8,get,place).
could_get(8,i,place).
could_only_get(8,i,place).
root(9,ROOT,arrange).
nsubj(9,arrange,i).
aux(9,arrange,will).
advmod(9,arrange,easily).
mark(9,you,that).
case(9,you,for).
dep(9,arrange,you).
root(10,ROOT,said).
det(10,dog,the).
nsubj(10,said,dog).
root(11,ROOT,come).
case(11,me,with).
nmod:with(11,come,me).
case(11,master,to).
nmod:poss(11,master,my).
nmod:to(11,come,master).
cc(11,come,and).
nsubj(11,share,you).
aux(11,share,shall).
conj:and(11,come,share).
nmod:poss(11,work,my).
dobj(11,share,work).
shall_share(11,you,my_work).
root(12,ROOT,went).
mark(12,went,so).
det(12,wolf,the).
nsubj(12,went,wolf).
cc(12,wolf,and).
det(12,dog,the).
conj:and(12,wolf,dog).
nsubj(12,went,dog).
case(12,town,towards).
det(12,town,the).
nmod:towards(12,went,town).
advmod(12,went,together).
went_together_towards(12,wolf,town).
went_towards(12,dog,town).
went_towards(12,wolf,town).
went_together_towards(12,dog,town).
root(13,ROOT,noticed).
case(13,there,on).
det(13,way,the).
nmod:npmod(13,there,way).
advcl:on(13,noticed,there).
det(13,wolf,the).
nsubj(13,noticed,wolf).
mark(13,worn,that).
det(13,hair,the).
nsubjpass(13,worn,hair).
case(13,part,on).
det(13,part,a).
amod(13,part,certain).
nmod:on(13,hair,part).
case(13,neck,of).
det(13,dog,the).
nmod:poss(13,neck,dog).
case(13,dog,'s).
nmod:of(13,part,neck).
auxpass(13,worn,was).
advmod(13,much,very).
advmod(13,worn,much).
ccomp(13,noticed,worn).
advmod(13,so,away).
advmod(13,worn,so).
nsubj(13,asked,he).
dep(13,so,asked).
dobj(13,asked,him).
advmod(13,come,how).
nsubj(13,come,that).
aux(13,come,had).
dep(13,asked,come).
nmod(13,come,about).
was(13,hair,much_worn_so).
was(13,hair,very_much_worn).
was(13,hair,much_worn).
was(13,hair,worn_so).
was(13,hair,worn_away_so).
noticed_on(13,wolf,way_there).
of(13,dog,neck).
noticed_on(13,wolf,there).
was(13,hair,very_much_worn_away_so).
was(13,hair,very_much_worn_so).
was(13,hair,worn).
was(13,hair,much_worn_away_so).
root(14,ROOT,is).
dep(14,is,oh).
advmod(14,is,it).
nsubj(14,is,nothing).
root(15,ROOT,said).
det(15,dog,the).
nsubj(15,said,dog).
root(16,ROOT,place).
nsubj(16,place,that).
cop(16,place,is).
advmod(16,place,only).
det(16,place,the).
advmod(16,put,where).
det(16,collar,the).
nsubjpass(16,put,collar).
nsubj:xsubj(16,keep,collar).
auxpass(16,put,is).
acl:relcl(16,place,put).
compound:prt(16,put,on).
case(16,night,at).
nmod:at(16,put,night).
mark(16,keep,to).
xcomp(16,put,keep).
dobj(16,keep,me).
amod(16,me,chained).
advmod(16,keep,up).
keep_up(16,collar,me_chained).
keep(16,collar,me).
keep_up(16,collar,me).
keep(16,collar,me_chained).
is_put_on_at(16,collar,night).
root(17,ROOT,chafes).
nsubj(17,chafes,it).
nsubjpass(17,used,it).
det(17,bit,a).
dobj(17,chafes,bit).
cc(17,chafes,but).
nmod:npmod(17,soon,one).
advmod(17,chafes,soon).
auxpass(17,used,gets).
conj:but(17,chafes,used).
case(17,it,to).
nmod:to(17,used,it).
gets(17,it,used).
chafes(17,it,bit).
chafes_soon(17,it,bit).
gets_used_to(17,it,it).
root(18,ROOT,that).
cop(18,that,is).
nsubj(18,that,all).
is(18,all,that).
root(19,ROOT,said).
det(19,wolf,the).
nsubj(19,said,wolf).
root(20,ROOT,master).
advmod(20,good-bye,then).
nsubj(20,master,good-bye).
case(20,you,to).
nmod:to(20,good-bye,you).
dobj(20,master,dog).
master(20,good-bye,dog).
