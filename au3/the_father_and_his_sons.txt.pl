root(0,ROOT,had).
det(0,father,a).
nsubj(0,had,father).
det(0,family,a).
dobj(0,had,family).
case(0,sons,of).
nmod:of(0,family,sons).
nsubj(0,quarreling,sons).
ref(0,sons,who).
aux(0,quarreling,were).
advmod(0,quarreling,perpetually).
acl:relcl(0,sons,quarreling).
case(0,themselves,among).
nmod:among(0,quarreling,themselves).
had(0,father,family).
root(1,ROOT,failed).
advmod(1,failed,when).
nsubj(1,failed,he).
nsubj:xsubj(1,heal,he).
mark(1,heal,to).
xcomp(1,failed,heal).
nmod:poss(1,disputes,their).
dobj(1,heal,disputes).
case(1,exhortations,by).
nmod:poss(1,exhortations,his).
nmod:by(1,heal,exhortations).
nsubj(1,determined,he).
nsubj:xsubj(1,give,he).
acl:relcl(1,exhortations,determined).
mark(1,give,to).
xcomp(1,determined,give).
iobj(1,give,them).
det(1,illustration,a).
amod(1,illustration,practical).
dobj(1,give,illustration).
case(1,evils,of).
det(1,evils,the).
nmod:of(1,illustration,evils).
case(1,disunion,of).
nmod:of(1,evils,disunion).
give(1,he,illustration).
give(1,he,practical_illustration).
give(1,he,them).
practical_illustration_of(1,them,evils).
practical_illustration_of(1,them,evils_of_disunion).
give(1,he,illustration_of_evils_of_disunion).
give(1,he,illustration_of_evils).
give(1,he,practical_illustration_of_evils_of_disunion).
heal(1,he,their_disputes).
illustration_of(1,them,evils).
give(1,he,practical_illustration_of_evils).
illustration_of(1,them,evils_of_disunion).
root(2,ROOT,and).
case(2,purpose,for).
det(2,purpose,this).
nmod:for(2,and,purpose).
nsubj(2,told,he).
nummod(2,day,one).
nmod:tmod(2,told,day).
acl:relcl(2,purpose,told).
dobj(2,told,them).
nsubj:xsubj(2,bring,them).
mark(2,bring,to).
xcomp(2,told,bring).
iobj(2,bring,him).
det(2,bundle,a).
dobj(2,bring,bundle).
case(2,sticks,of).
nmod:of(2,bundle,sticks).
bring(2,them,bundle).
bring(2,them,him).
bring(2,them,bundle_of_sticks).
told(2,he,them).
root(3,ROOT,done).
advmod(3,done,when).
nsubj(3,done,they).
aux(3,done,had).
advmod(3,placed,so).
nsubj(3,placed,he).
nsubj(3,ordered,he).
ccomp(3,done,placed).
det(3,faggot,the).
dobj(3,placed,faggot).
case(3,hands,into).
det(3,hands,the).
nmod:into(3,placed,hands).
case(3,each,of).
nmod:of(3,hands,each).
case(3,them,of).
nmod:of(3,each,them).
case(3,succession,in).
nmod:in(3,placed,succession).
cc(3,placed,and).
ccomp(3,done,ordered).
conj:and(3,placed,ordered).
dobj(3,ordered,them).
nsubj:xsubj(3,break,them).
mark(3,break,to).
xcomp(3,ordered,break).
dobj(3,break,it).
case(3,pieces,in).
nmod:in(3,break,pieces).
so_placed(3,he,faggot).
so_placed_faggot_into(3,he,hands_of_each).
so_placed_faggot_into(3,he,hands_of_each_of_them).
placed_faggot_into(3,he,hands_of_each).
placed_faggot_into(3,he,hands_of_each_of_them).
placed_faggot_into(3,he,hands).
placed(3,he,faggot).
placed_faggot_in(3,he,succession).
so_placed_faggot_in(3,he,succession).
break(3,them,it).
so_placed_faggot_into(3,he,hands).
ordered(3,he,them).
root(4,ROOT,tried).
nsubj(4,tried,they).
nsubj(4,able,they).
nsubj:xsubj(4,do,they).
case(4,strength,with).
det:predet(4,strength,all).
nmod:poss(4,strength,their).
nmod:with(4,tried,strength).
cc(4,tried,and).
cop(4,able,were).
neg(4,able,not).
conj:and(4,tried,able).
mark(4,do,to).
xcomp(4,able,do).
dobj(4,do,it).
root(5,ROOT,opened).
nsubj(5,opened,he).
nsubj(5,put,he).
advmod(5,opened,next).
det(5,faggot,the).
nsubj(5,took,faggot).
ccomp(5,opened,took).
det(5,sticks,the).
dobj(5,took,sticks).
advmod(5,took,separately).
nmod:npmod(5,separately,one).
case(5,one,by).
nmod:by(5,separately,one).
cc(5,opened,and).
advmod(5,put,again).
conj:and(5,opened,put).
dobj(5,put,them).
case(5,hands,into).
nmod:poss(5,sons,his).
nmod:poss(5,hands,sons).
case(5,sons,').
nmod:into(5,put,hands).
mark(5,broke,upon).
dobj(5,broke,which).
nsubj(5,broke,they).
advcl:upon(5,put,broke).
dobj(5,broke,them).
advmod(5,broke,easily).
took(5,faggot,sticks).
took_separately(5,faggot,sticks).
put(5,he,them).
broke_easily(5,they,them).
again_put(5,he,them).
broke(5,they,them).
root(6,ROOT,addressed).
nsubj(6,addressed,he).
advmod(6,addressed,then).
dobj(6,addressed,them).
case(6,words,in).
det(6,words,these).
nmod:in(6,addressed,words).
addressed(6,he,them).
root(7,ROOT,sons).
nmod:poss(7,sons,my).
mark(7,mind,if).
nsubj(7,mind,you).
nsubj(7,unite,you).
nsubj:xsubj(7,assist,you).
cop(7,mind,are).
case(7,mind,of).
nummod(7,mind,one).
advcl:of(7,faggot,mind).
cc(7,mind,and).
conj:and(7,mind,unite).
advcl:of(7,faggot,unite).
mark(7,assist,to).
xcomp(7,unite,assist).
det(7,other,each).
dobj(7,assist,other).
nsubj(7,faggot,you).
aux(7,faggot,will).
cop(7,faggot,be).
case(7,faggot,as).
det(7,faggot,this).
acl:relcl(7,sons,faggot).
amod(7,faggot,uninjured).
case(7,attempts,by).
det:predet(7,attempts,all).
det(7,attempts,the).
nmod:by(7,uninjured,attempts).
case(7,enemies,of).
nmod:poss(7,enemies,your).
nmod:of(7,attempts,enemies).
are_of(7,you,one_mind).
will_as(7,you,will_faggot_uninjured_by_attempts_of_enemies).
will_as(7,you,will_faggot_uninjured_by_attempts_of_your_enemies).
will_as(7,you,will_faggot).
root(8,ROOT,divided).
cc(8,divided,but).
mark(8,divided,if).
nsubjpass(8,divided,you).
auxpass(8,divided,are).
case(8,yourselves,among).
nmod:among(8,divided,yourselves).
nsubjpass(8,broken,you).
aux(8,broken,will).
auxpass(8,broken,be).
acl:relcl(8,yourselves,broken).
advmod(8,easily,as).
advmod(8,broken,easily).
case(8,sticks,as).
det(8,sticks,these).
nmod:as(8,broken,sticks).
will(8,you,will_broken_as_sticks).
will(8,you,will_broken).
are(8,you,divided).
will(8,you,will_broken_as_easily).
will(8,you,will_broken_easily_as_sticks).
will(8,you,will_broken_easily).
will(8,you,will_broken_as_easily_as_sticks).
