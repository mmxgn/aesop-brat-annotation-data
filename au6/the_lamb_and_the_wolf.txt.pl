root(0,ROOT,pursued).
det(0,wolf,a).
nsubj(0,pursued,wolf).
det(0,lamb,a).
dobj(0,pursued,lamb).
nsubj(0,fled,lamb).
ref(0,lamb,which).
acl:relcl(0,lamb,fled).
case(0,refuge,for).
nmod:for(0,fled,refuge).
case(0,temple,to).
det(0,temple,a).
amod(0,temple,certain).
nmod:to(0,fled,temple).
root(1,ROOT,called).
det(1,wolf,the).
nsubj(1,called,wolf).
nsubj(1,said,wolf).
compound:prt(1,called,out).
case(1,him,to).
nmod:to(1,called,him).
cc(1,called,and).
conj:and(1,called,said).
called_out_to(1,wolf,him).
root(2,ROOT,slay).
det(2,priest,the).
nsubj(2,slay,priest).
aux(2,slay,will).
dobj(2,slay,you).
case(2,sacrifice,in).
nmod:in(2,slay,sacrifice).
mark(2,catch,if).
nsubj(2,catch,he).
aux(2,catch,should).
advcl:if(2,slay,catch).
dobj(2,catch,you).
should_catch(2,he,you).
will_slay(2,priest,you).
root(3,ROOT,replied).
case(3,which,on).
nmod:on(3,replied,which).
det(3,lamb,the).
nsubj(3,replied,lamb).
root(4,ROOT,better).
nsubj(4,better,it).
nsubjpass:xsubj(4,sacrificed,it).
aux(4,better,would).
cop(4,better,be).
case(4,me,for).
nmod:for(4,better,me).
mark(4,sacrificed,to).
auxpass(4,sacrificed,be).
xcomp(4,better,sacrificed).
case(4,temple,in).
det(4,temple,the).
nmod:in(4,sacrificed,temple).
mark(4,eaten,than).
mark(4,eaten,to).
auxpass(4,eaten,be).
advcl:to(4,better,eaten).
case(4,you,by).
nmod:agent(4,eaten,you).
be_eaten_by(4,it,you).
be(4,it,sacrificed).
be(4,it,eaten).
would(4,it,would_better).
be_sacrificed_in(4,it,temple).
would(4,it,would_better_for_me).
