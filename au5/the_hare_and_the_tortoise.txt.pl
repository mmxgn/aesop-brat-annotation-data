root(0,ROOT,boasting).
det(0,hare,the).
nsubj(0,boasting,hare).
aux(0,boasting,was).
advmod(0,boasting,once).
case(0,speed,of).
nmod:poss(0,speed,his).
nmod:of(0,boasting,speed).
case(0,animals,before).
det(0,animals,the).
amod(0,animals,other).
nmod:before(0,boasting,animals).
was_once_boasting_before(0,hare,other_animals).
was_once_boasting_of(0,hare,his_speed).
was_boasting_of(0,hare,his_speed).
was_boasting_before(0,hare,other_animals).
was_once_boasting_before(0,hare,animals).
was_boasting_before(0,hare,animals).
root(1,ROOT,beaten).
nsubjpass(1,beaten,i).
aux(1,beaten,have).
neg(1,beaten,never).
advmod(1,beaten,yet).
auxpass(1,beaten,been).
root(2,ROOT,said).
nsubj(2,said,he).
root(3,ROOT,put).
advmod(3,put,when).
nsubj(3,put,i).
advmod(3,put,forth).
nmod:poss(3,speed,my).
amod(3,speed,full).
dobj(3,put,speed).
put_forth(3,i,my_speed).
put_forth(3,i,my_full_speed).
put(3,i,my_full_speed).
put(3,i,my_speed).
root(4,ROOT,challenge).
advmod(4,challenge,i).
det(4,one,any).
dobj(4,challenge,one).
advmod(4,challenge,here).
case(4,race,to).
nmod:to(4,challenge,race).
case(4,me,with).
nmod:with(4,race,me).
is_with(4,race,me).
root(5,ROOT,said).
det(5,tortoise,the).
nsubj(5,said,tortoise).
advmod(5,said,quietly).
root(6,ROOT,accept).
advmod(6,accept,i).
nmod:poss(6,challenge,your).
dobj(6,accept,challenge).
root(7,ROOT,joke).
nsubj(7,joke,that).
cop(7,joke,is).
det(7,joke,a).
amod(7,joke,good).
is(7,that,good).
root(8,ROOT,said).
det(8,hare,the).
nsubj(8,said,hare).
root(9,ROOT,dance).
advmod(9,dance,i).
aux(9,dance,could).
dobj(9,dance,round).
nsubj(9,dance,you).
det:predet(9,way,all).
det(9,way,the).
dep(9,you,way).
root(10,ROOT,keep).
nmod:poss(10,boasting,your).
dobj(10,keep,boasting).
mark(10,beaten,till).
nsubj(10,beaten,you).
aux(10,beaten,'ve).
advcl:till(10,keep,beaten).
root(11,ROOT,answered).
det(11,tortoise,the).
dobj(11,answered,tortoise).
root(12,ROOT,shall).
nsubj(12,shall,we).
dep(12,we,race).
root(13,ROOT,so).
det(13,course,a).
nsubjpass(13,fixed,course).
auxpass(13,fixed,was).
ccomp(13,so,fixed).
cc(13,fixed,and).
det(13,start,a).
nsubjpass(13,made,start).
auxpass(13,made,was).
ccomp(13,so,made).
conj:and(13,fixed,made).
was(13,start,made).
was(13,course,fixed).
root(14,ROOT,darted).
det(14,hare,the).
nsubj(14,darted,hare).
nsubj(14,stopped,hare).
advmod(14,darted,almost).
case(14,almost,out).
case(14,sight,of).
nmod:of(14,darted,sight).
case(14,once,at).
nmod:at(14,sight,once).
cc(14,darted,but).
advmod(14,stopped,soon).
conj:but(14,darted,stopped).
cc(14,darted,and).
mark(14,show,to).
csubj(14,lay,show).
nmod:poss(14,contempt,his).
dobj(14,show,contempt).
case(14,tortoise,for).
det(14,tortoise,the).
nmod:for(14,show,tortoise).
conj:and(14,darted,lay).
compound:prt(14,lay,down).
mark(14,have,to).
xcomp(14,lay,have).
det(14,nap,a).
dobj(14,have,nap).
darted_almost_of(14,hare,sight).
darted_of(14,hare,sight).
darted_almost_of(14,hare,sight_at_once).
darted_of(14,hare,sight_at_once).
root(15,ROOT,plodded).
det(15,tortoise,the).
nsubj(15,plodded,tortoise).
nsubj(15,plodded,tortoise).
nmod(15,plodded,on).
cc(15,plodded,and).
conj:and(15,plodded,plodded).
mark(15,awoke,on).
cc(15,awoke,and).
advmod(15,awoke,when).
det(15,hare,the).
nsubj(15,awoke,hare).
advcl:on(15,saw,awoke).
case(15,nap,from).
nmod:poss(15,nap,his).
nmod:from(15,awoke,nap).
nsubj(15,saw,he).
nsubj(15,run,he).
nsubj:xsubj(15,save,he).
ccomp(15,plodded,saw).
det(15,tortoise,the).
dobj(15,saw,tortoise).
advmod(15,winning-post,just).
case(15,winning-post,near).
det(15,winning-post,the).
nmod:near(15,saw,winning-post).
cc(15,saw,and).
aux(15,run,could).
neg(15,run,not).
ccomp(15,plodded,run).
conj:and(15,saw,run).
compound:prt(15,run,up).
case(15,time,in).
nmod:in(15,run,time).
mark(15,save,to).
xcomp(15,run,save).
det(15,race,the).
dobj(15,save,race).
awoke_from(15,hare,his_nap).
