root(0,ROOT,swamp).
det(0,frogs,the).
nsubj(0,living,frogs).
aux(0,living,were).
dep(0,swamp,living).
case(0,happy,as).
advcl:as(0,living,happy).
mark(0,marshy,as).
aux(0,marshy,could).
cop(0,marshy,be).
case(0,marshy,in).
det(0,marshy,a).
advcl:in(0,living,marshy).
dobj(0,swamp,that).
advmod(0,suited,just).
acl(0,that,suited).
nsubj(0,swamp,them).
swamp(0,them,that_suited).
swamp(0,them,that_just_suited).
swamp(0,them,that).
root(1,ROOT,went).
nsubj(1,went,they).
xcomp(1,went,splashing).
mark(1,caring,about).
advcl:about(1,splashing,caring).
case(1,nobody,for).
nmod:for(1,caring,nobody).
cc(1,nobody,and).
nmod:for(1,caring,nobody).
conj:and(1,nobody,nobody).
amod(1,nobody,troubling).
case(1,them,with).
nmod:with(1,troubling,them).
splashing(1,they,caring_for_nobody).
splashing(1,they,caring_for_nobody_troubling_with_them).
splashing(1,they,caring_for_nobody_troubling).
splashing(1,they,caring).
went(1,they,splashing).
root(2,ROOT,thought).
case(2,some,but).
det:qmod(2,them,some).
mwe(2,some,of).
nmod(2,thought,them).
mark(2,right,that).
nsubj(2,right,this).
cop(2,right,was).
neg(2,right,not).
ccomp(2,thought,right).
mark(2,have,that).
nsubj(2,have,they).
aux(2,have,should).
ccomp(2,right,have).
det(2,king,a).
dobj(2,have,king).
cc(2,king,and).
det(2,constitution,a).
amod(2,constitution,proper).
dobj(2,have,constitution).
conj:and(2,king,constitution).
mark(2,determined,so).
nsubj(2,determined,they).
nsubj:xsubj(2,send,they).
advcl:so(2,have,determined).
mark(2,send,to).
xcomp(2,determined,send).
compound:prt(2,send,up).
det(2,petition,a).
nsubj(2,thought,petition).
mark(2,jove,to).
acl:to(2,petition,jove).
mark(2,give,to).
xcomp(2,jove,give).
dobj(2,give,them).
dobj(2,wanted,what).
nsubj(2,wanted,they).
dep(2,give,wanted).
root(3,ROOT,jove).
dep(3,jove,mighty).
root(4,ROOT,cried).
nsubj(4,cried,they).
root(5,ROOT,send).
xcomp(5,send,unto).
dobj(5,unto,us).
det(5,king,a).
nsubj(5,send,king).
nsubj(5,rule,king).
nsubj(5,keep,king).
ref(5,king,that).
aux(5,rule,will).
acl:relcl(5,king,rule).
case(5,us,over).
nmod:over(5,rule,us).
cc(5,rule,and).
acl:relcl(5,king,keep).
conj:and(5,rule,keep).
dobj(5,keep,us).
advcl(5,keep,in).
mwe(5,in,order).
root(6,ROOT,swamp).
nsubj(6,swamp,jove).
acl:relcl(6,jove,laughed).
case(6,their,at).
nmod:at(6,laughed,their).
amod(6,their,croaking).
cc(6,laughed,and).
acl:relcl(6,jove,threw).
conj:and(6,laughed,threw).
compound:prt(6,threw,down).
case(6,the,into).
nmod:into(6,threw,the).
det(6,log,a).
amod(6,log,huge).
nsubj(6,came,log).
nsubj(6,swamp,log).
ref(6,log,which).
acl:relcl(6,log,came).
dobj(6,came,downrplashto).
dep(6,downrplashto,the).
ccomp(6,swamp,swamp).
root(7,ROOT,frightened).
det(7,frogs,the).
nsubj(7,frightened,frogs).
nsubj(7,rushed,frogs).
nsubj:xsubj(7,look,frogs).
cop(7,frightened,were).
case(7,lives,out).
mwe(7,out,of).
nmod:poss(7,lives,their).
nmod:out_of(7,frightened,lives).
case(7,commotion,by).
det(7,commotion,the).
nmod:by(7,lives,commotion).
acl(7,commotion,made).
case(7,midst,in).
nmod:poss(7,midst,their).
nmod:in(7,made,midst).
cc(7,frightened,and).
advmod(7,rushed,all).
conj:and(7,frightened,rushed).
case(7,bank,to).
det(7,bank,the).
nmod:to(7,rushed,bank).
mark(7,look,to).
xcomp(7,rushed,look).
case(7,monster,at).
det(7,monster,the).
amod(7,monster,horrible).
nmod:at(7,look,monster).
all_rushed(7,frogs,look).
were_frightened_out_of(7,frogs,their_lives).
all_rushed(7,frogs,look_at_monster).
all_rushed_to(7,frogs,bank).
rushed_to(7,frogs,bank).
rushed(7,frogs,look_at_horrible_monster).
rushed(7,frogs,look).
rushed(7,frogs,look_at_monster).
were_frightened_out_of(7,frogs,their_lives_by_commotion_made_in_their_midst).
were_frightened_out_of(7,frogs,their_lives_by_commotion_made).
were_frightened_out_of(7,frogs,their_lives_by_commotion).
were(7,frogs,frightened).
all_rushed(7,frogs,look_at_horrible_monster).
root(8,ROOT,ventured).
cc(8,ventured,but).
mark(8,ventured,after).
det(8,time,a).
nsubj(8,ventured,time).
nsubj(8,dared,time).
nsubj:xsubj(8,touch,time).
acl(8,time,seeing).
mark(8,move,that).
nsubj(8,move,it).
aux(8,move,did).
neg(8,move,not).
ccomp(8,seeing,move).
dobj(8,move,one).
cc(8,one,or).
dobj(8,move,two).
conj:or(8,one,two).
case(8,boldest,of).
det(8,boldest,the).
nmod:of(8,one,boldest).
case(8,them,of).
nmod:of(8,boldest,them).
compound:prt(8,ventured,out).
case(8,log,towards).
det(8,log,the).
nmod:towards(8,ventured,log).
cc(8,ventured,and).
advmod(8,dared,even).
conj:and(8,ventured,dared).
mark(8,touch,to).
xcomp(8,dared,touch).
dobj(8,touch,it).
ventured_out_towards(8,time,log).
root(9,ROOT,still).
nsubj(9,move,it).
aux(9,move,did).
neg(9,move,not).
ccomp(9,still,move).
root(10,ROOT,jumped).
advmod(10,hero,then).
det(10,hero,the).
amod(10,hero,greatest).
nsubj(10,jumped,hero).
nsubj(10,commenced,hero).
case(10,frogs,of).
det(10,frogs,the).
nmod:of(10,hero,frogs).
case(10,log,upon).
det(10,log,the).
nmod:upon(10,jumped,log).
cc(10,jumped,and).
conj:and(10,jumped,commenced).
xcomp(10,commenced,dancing).
compound:prt(10,dancing,up).
cc(10,up,and).
dep(10,up,down).
mark(10,came,upon).
nsubj(10,came,it).
nsubj(10,did,it).
advmod(10,came,thereupon).
det:predet(10,frogs,all).
det(10,frogs,the).
nsubj(10,came,frogs).
advcl:upon(10,dancing,came).
cc(10,came,and).
advcl:upon(10,dancing,did).
conj:and(10,came,did).
det(10,same,the).
dobj(10,did,same).
did(10,frogs,same).
jumped_upon(10,hero,log).
jumped_upon(10,greatest_hero,log).
root(11,ROOT,and).
case(11,time,for).
det(11,time,some).
nmod:for(11,and,time).
det(11,frogs,the).
nsubj(11,went,frogs).
acl:relcl(11,time,went).
case(11,business,about).
nmod:poss(11,business,their).
nmod:about(11,went,business).
det(11,day,every).
dep(11,business,day).
mark(11,taking,without).
advcl:without(11,went,taking).
det(11,notice,the).
amod(11,notice,slightest).
dobj(11,taking,notice).
case(11,log,of).
nmod:poss(11,log,their).
amod(11,log,new).
compound(11,log,king).
nmod:of(11,notice,log).
acl(11,log,lying).
case(11,midst,in).
nmod:poss(11,midst,their).
nmod:in(11,lying,midst).
taking(11,frogs,slightest_notice_of_their_new_king_log).
taking(11,frogs,notice_of_their_new_king_log_lying_in_their_midst).
taking(11,frogs,slightest_notice_of_their_new_king_log_lying).
taking(11,frogs,notice_of_their_king_log_lying_in_their_midst).
taking(11,frogs,slightest_notice).
taking(11,frogs,notice_of_their_king_log_lying).
taking(11,frogs,slightest_notice_of_their_new_king_log_lying_in_their_midst).
taking(11,frogs,slightest_notice_of_their_king_log_lying).
taking(11,frogs,notice_of_their_king_log).
taking(11,frogs,notice_of_their_new_king_log_lying).
taking(11,frogs,notice).
taking(11,frogs,slightest_notice_of_their_king_log).
taking(11,frogs,slightest_notice_of_their_king_log_lying_in_their_midst).
taking(11,frogs,notice_of_their_new_king_log).
root(12,ROOT,suit).
cc(12,suit,but).
nsubj(12,suit,this).
aux(12,suit,did).
neg(12,suit,not).
dobj(12,suit,them).
mark(12,sent,so).
nsubj(12,sent,they).
nsubj(12,said,they).
advcl:so(12,suit,sent).
det(12,petition,another).
dobj(12,sent,petition).
case(12,jove,to).
nmod:to(12,sent,jove).
cc(12,sent,and).
advcl:so(12,suit,said).
conj:and(12,sent,said).
case(12,him,to).
nmod:to(12,said,him).
root(13,ROOT,want).
nsubj(13,want,we).
det(13,king,a).
amod(13,king,real).
dobj(13,want,king).
want(13,we,king).
want(13,we,real_king).
root(14,ROOT,one).
nsubj(14,rule,that).
aux(14,rule,will).
advmod(14,rule,really).
dep(14,one,rule).
case(14,us,over).
nmod:over(14,rule,us).
root(15,ROOT,this).
dep(15,this,now).
acl(15,this,made).
nsubj(15,angry,jove).
xcomp(15,made,angry).
mark(15,sent,so).
nsubj(15,sent,he).
advcl:so(15,made,sent).
case(15,them,among).
nmod:among(15,sent,them).
det(15,stork,a).
amod(15,stork,big).
dobj(15,sent,stork).
nsubj(15,set,stork).
nsubj:xsubj(15,work,stork).
ref(15,stork,that).
advmod(15,set,soon).
acl:relcl(15,stork,set).
mark(15,work,to).
xcomp(15,set,work).
xcomp(15,work,gobbling).
dobj(15,gobbling,them).
dep(15,up,all).
advmod(15,gobbling,up).
root(16,ROOT,repented).
advmod(16,frogs,then).
det(16,frogs,the).
nsubj(16,repented,frogs).
dep(16,late,when).
advmod(16,late,too).
dep(16,repented,late).
