root(0,ROOT,time).
dep(0,time,at).
nummod(0,time,one).
det(0,fox,the).
nsubj(0,terms,fox).
nsubj(0,seemed,fox).
cc(0,fox,and).
det(0,stork,the).
conj:and(0,fox,stork).
nsubj(0,terms,stork).
cop(0,terms,were).
case(0,terms,on).
amod(0,terms,visiting).
acl:relcl(0,time,terms).
cc(0,terms,and).
acl:relcl(0,time,seemed).
conj:and(0,terms,seemed).
advmod(0,good,very).
amod(0,friends,good).
xcomp(0,seemed,friends).
were_on(0,fox,terms).
seemed(0,stork,very_good_friends).
seemed(0,stork,friends).
were_on(0,stork,terms).
were_on(0,stork,visiting_terms).
were_on(0,fox,visiting_terms).
seemed(0,stork,good_friends).
root(1,ROOT,invited).
mark(1,invited,so).
det(1,fox,the).
nsubj(1,invited,fox).
det(1,stork,the).
dobj(1,invited,stork).
case(1,dinner,to).
nmod:to(1,invited,dinner).
cc(1,invited,and).
mark(1,put,for).
det(1,joke,a).
nsubj(1,put,joke).
conj:and(1,invited,put).
dobj(1,put,nothing).
case(1,her,before).
nmod:before(1,put,her).
case(1,soup,but).
det(1,soup,some).
nmod:but(1,put,soup).
case(1,dish,in).
det(1,dish,a).
advmod(1,dish,very).
amod(1,dish,shallow).
nmod:in(1,soup,dish).
put(1,joke,nothing).
put_nothing_but(1,joke,soup_in_very_dish).
put_nothing_but(1,joke,soup_in_very_shallow_dish).
invited(1,fox,stork).
is_in(1,soup,very_shallow_dish).
put_nothing_but(1,joke,soup_in_dish).
invited_stork_to(1,fox,dinner).
put_nothing_before(1,joke,her).
put_nothing_but(1,joke,soup).
put_nothing_but(1,joke,soup_in_shallow_dish).
root(2,ROOT,this).
det(2,fox,the).
nsubj(2,lap,fox).
nsubj(2,left,fox).
aux(2,lap,could).
advmod(2,lap,easily).
acl:relcl(2,this,lap).
compound:prt(2,lap,up).
cc(2,wet,but).
det(2,stork,the).
nsubj(2,wet,stork).
aux(2,wet,could).
advmod(2,wet,only).
ccomp(2,lap,wet).
det(2,end,the).
dobj(2,wet,end).
case(2,bill,of).
nmod:poss(2,bill,her).
amod(2,bill,long).
nmod:of(2,end,bill).
case(2,it,in).
nmod:in(2,bill,it).
cc(2,lap,and).
acl:relcl(2,this,left).
conj:and(2,lap,left).
det(2,meal,the).
dobj(2,left,meal).
case(2,hungry,as).
advcl:as(2,left,hungry).
mark(2,began,as).
advmod(2,began,when).
nsubj(2,began,she).
acl:as(2,this,began).
is_in(2,her_long_bill,it).
only_wet(2,stork,end).
left_meal_as(2,fox,hungry).
wet(2,stork,end_of_her_bill_in_it).
only_wet(2,stork,end_of_her_bill_in_it).
only_wet(2,stork,end_of_her_long_bill_in_it).
wet(2,stork,end).
only_wet(2,stork,end_of_her_long_bill).
wet(2,stork,end_of_her_long_bill).
wet(2,stork,end_of_her_long_bill_in_it).
left(2,fox,meal).
wet(2,stork,end_of_her_bill).
only_wet(2,stork,end_of_her_bill).
root(3,ROOT,sorry).
nsubj(3,sorry,i).
cop(3,sorry,am).
am(3,i,sorry).
root(4,ROOT,said).
det(4,fox,the).
nsubj(4,said,fox).
root(5,ROOT,liking).
det(5,soup,the).
nsubj(5,liking,soup).
cop(5,liking,is).
neg(5,liking,not).
case(5,liking,to).
nmod:poss(5,liking,your).
root(6,ROOT,apologise).
nsubj(6,apologise,pray).
aux(6,apologise,do).
neg(6,apologise,not).
root(7,ROOT,said).
det(7,stork,the).
nsubj(7,said,stork).
root(8,ROOT,hope).
nsubj(8,hope,i).
nsubj(8,return,you).
nsubj(8,come,you).
aux(8,return,will).
ccomp(8,hope,return).
det(8,visit,this).
dobj(8,return,visit).
cc(8,return,and).
ccomp(8,hope,come).
conj:and(8,return,come).
cc(8,come,and).
conj:and(8,return,dine).
conj:and(8,come,dine).
case(8,me,with).
nmod:with(8,come,me).
advmod(8,come,soon).
return(8,you,visit).
come_with(8,you,me).
come_soon_with(8,you,me).
root(9,ROOT,appointed).
advmod(9,day,so).
det(9,day,a).
nsubjpass(9,appointed,day).
auxpass(9,appointed,was).
advmod(9,visit,when).
det(9,fox,the).
nsubj(9,visit,fox).
aux(9,visit,should).
advcl(9,appointed,visit).
det(9,stork,the).
dobj(9,visit,stork).
was(9,day,appointed).
should_visit(9,fox,stork).
root(10,ROOT,seated).
cc(10,seated,but).
advmod(10,seated,when).
nsubjpass(10,seated,they).
auxpass(10,seated,were).
case(10,table,at).
nmod:at(10,seated,table).
nsubj(10,was,table).
dobj(10,was,all).
ref(10,table,that).
acl:relcl(10,table,was).
mark(10,contained,for).
nmod:poss(10,dinner,their).
nsubjpass(10,contained,dinner).
auxpass(10,contained,was).
advcl:for(10,was,contained).
case(10,jar,in).
det(10,jar,a).
advmod(10,jar,very).
amod(10,jar,long-necked).
nmod:in(10,contained,jar).
case(10,mouth,with).
det(10,mouth,a).
amod(10,mouth,narrow).
nmod:with(10,jar,mouth).
nmod:in(10,insert,mouth).
case(10,which,in).
ref(10,mouth,which).
det(10,fox,the).
nsubj(10,insert,fox).
aux(10,insert,could).
neg(10,insert,not).
acl:relcl(10,mouth,insert).
nmod:poss(10,snout,his).
dobj(10,insert,snout).
mark(10,was,so).
nsubj(10,was,all).
nsubj:xsubj(10,lick,all).
nsubj(10,manage,he).
nsubj:xsubj(10,do,he).
aux(10,manage,could).
acl:relcl(10,all,manage).
mark(10,do,to).
xcomp(10,manage,do).
advcl:so(10,insert,was).
mark(10,lick,to).
xcomp(10,was,lick).
det(10,jar,the).
case(10,jar,outside).
mwe(10,outside,of).
det(10,jar,the).
nmod:outside_of(10,lick,jar).
was_contained_in(10,their_dinner,very_long-necked_jar).
is_with(10,long-necked_jar,narrow_mouth).
was(10,their_dinner,contained).
were(10,they,when_seated).
was_contained_in(10,their_dinner,jar).
could_manage(10,he,do).
was_contained_in(10,their_dinner,very_jar).
was_contained_in(10,their_dinner,long-necked_jar).
were(10,they,seated).
root(11,ROOT,apologise).
nsubj(11,apologise,i).
aux(11,apologise,will).
neg(11,apologise,not).
case(11,dinner,for).
det(11,dinner,the).
nmod:for(11,apologise,dinner).
