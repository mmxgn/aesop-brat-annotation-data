root(0,ROOT,presented).
det(0,oaks,the).
nsubj(0,presented,oaks).
det(0,complaint,a).
dobj(0,presented,complaint).
case(0,jupiter,to).
nmod:to(0,presented,jupiter).
acl(0,jupiter,saying).
presented(0,oaks,complaint).
presented_complaint_to(0,oaks,jupiter).
presented_complaint_to(0,oaks,jupiter_saying).
root(1,ROOT,bear).
nsubj(1,bear,we).
case(1,purpose,for).
neg(1,purpose,no).
nmod:for(1,bear,purpose).
det(1,burden,the).
dobj(1,bear,burden).
case(1,life,of).
nmod:of(1,burden,life).
case(1,trees,as).
mwe(1,as,of).
det:predet(1,trees,all).
det(1,trees,the).
nmod:as_of(1,bear,trees).
nsubj(1,grow,that).
ccomp(1,trees,grow).
nsubj(1,the,we).
cop(1,the,are).
ccomp(1,grow,the).
advmod(1,the,most).
advmod(1,the,continually).
case(1,peril,in).
nmod:in(1,the,peril).
case(1,axe,of).
det(1,axe,the).
nmod:of(1,peril,axe).
root(2,ROOT,made).
nsubj(2,made,jupiter).
dobj(2,made,answer).
made(2,jupiter,answer).
root(3,ROOT,have).
nsubj(3,have,you).
nsubj:xsubj(3,thank,you).
advmod(3,have,only).
mark(3,thank,to).
xcomp(3,have,thank).
dobj(3,thank,yourselves).
case(3,misfortunes,for).
det(3,misfortunes,the).
nmod:for(3,thank,misfortunes).
nmod:to(3,exposed,misfortunes).
case(3,which,to).
ref(3,misfortunes,which).
nsubjpass(3,exposed,you).
auxpass(3,exposed,are).
acl:relcl(3,misfortunes,exposed).
mark(3,laid,for).
mark(3,make,if).
nsubj(3,make,you).
nsubj(3,prove,you).
aux(3,make,did).
neg(3,make,not).
advcl:if(3,laid,make).
amod(3,pillars,such).
amod(3,pillars,excellent).
dobj(3,make,pillars).
cc(3,pillars,and).
dobj(3,make,posts).
conj:and(3,pillars,posts).
cc(3,make,and).
conj:and(3,make,prove).
advcl:if(3,laid,prove).
nsubj(3,serviceable,yourselves).
advmod(3,serviceable,so).
xcomp(3,prove,serviceable).
case(3,carpenters,to).
det(3,carpenters,the).
nmod:to(3,serviceable,carpenters).
cc(3,carpenters,and).
det(3,farmers,the).
nmod:to(3,serviceable,farmers).
conj:and(3,carpenters,farmers).
det(3,axe,the).
nsubjpass(3,laid,axe).
aux(3,laid,would).
neg(3,laid,not).
advmod(3,frequently,so).
advmod(3,laid,frequently).
auxpass(3,laid,be).
advcl:for(3,exposed,laid).
case(3,roots,to).
nmod:poss(3,roots,your).
nmod:to(3,laid,roots).
prove(3,you,yourselves_so_serviceable).
serviceable_to(3,yourselves,carpenters).
prove(3,you,yourselves_serviceable_to_carpenters).
prove(3,you,yourselves_so_serviceable_to_carpenters).
thank(3,you,yourselves).
prove(3,you,yourselves_serviceable).
so_serviceable_to(3,yourselves,carpenters).
