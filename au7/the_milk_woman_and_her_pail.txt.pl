%% a farmer 's daughter was carrying her pail of milk from the field to the farmhouse when she fell a-musing.
% dependencies.
root(0,root,carry).
det(0,farmer,a).
nmod:poss(0,daughter,farmer).
case(0,farmer,'s).
nsubj(0,carry,daughter).
aux(0,carry,be).
nmod:poss(0,pail,she).
dobj(0,carry,pail).
case(0,milk,of).
nmod:of(0,pail,milk).
case(0,field,from).
det(0,field,the).
nmod:from(0,carry,field).
case(0,farmhouse,to).
det(0,farmhouse,the).
nmod:to(0,field,farmhouse).
advmod(0,fall,when).
nsubj(0,fall,she).
acl:relcl(0,farmhouse,fall).
dobj(0,fall,a-musing).
% relations.
be_carry(0,farmer_'s_daughter,she_pail).
fall(0,she,a-musing).
be_carry(0,farmer_'s_daughter,she_pail_of_milk).
has(0,farmer,daughter).
%% the money for which this milk will be sold will buy at least three hundred eggs.
% dependencies.
root(1,root,buy).
det(1,money,the).
nmod:for(1,sell,money).
nsubj(1,buy,money).
case(1,which,for).
ref(1,money,which).
det(1,milk,this).
nsubjpass(1,sell,milk).
aux(1,sell,will).
auxpass(1,sell,be).
acl:relcl(1,money,sell).
aux(1,buy,will).
case(1,least,at).
nmod:npmod(1,hundred,least).
compound(1,hundred,three).
nummod(1,egg,hundred).
dobj(1,buy,egg).
% relations.
will(1,milk,will_sell).
%% the eggs allowing for all mishaps will produce two hundred and fifty chickens.
% dependencies.
root(2,root,produce).
det(2,egg,the).
nsubj(2,produce,egg).
acl(2,egg,allow).
case(2,mishap,for).
det(2,mishap,all).
nmod:for(2,allow,mishap).
aux(2,produce,will).
nummod(2,hundred,two).
dobj(2,produce,hundred).
cc(2,hundred,and).
nummod(2,chicken,fifty).
dobj(2,produce,chicken).
conj:and(2,hundred,chicken).
% relations.
will_produce(2,egg,fifty_chicken).
allow_for(2,egg,mishap).
%% the chickens will become ready for the market when poultry will fetch the highest price so that by the end of the year i shall have money enough from my share to buy a new gown.
% dependencies.
root(3,root,become).
det(3,chicken,the).
nsubj(3,become,chicken).
aux(3,become,will).
xcomp(3,become,ready).
case(3,market,for).
det(3,market,the).
nmod:for(3,ready,market).
advmod(3,fetch,when).
nsubj(3,fetch,poultry).
aux(3,fetch,will).
advcl(3,become,fetch).
det(3,price,the).
amod(3,price,highest).
dobj(3,fetch,price).
mark(3,have,so).
mwe(3,so,that).
case(3,end,by).
det(3,end,the).
nmod:by(3,have,end).
case(3,year,of).
det(3,year,the).
nmod:of(3,end,year).
nsubj(3,have,i).
aux(3,have,shall).
advcl:so_that(3,fetch,have).
dobj(3,have,money).
advmod(3,have,enough).
case(3,share,from).
nmod:poss(3,share,my).
nmod:from(3,enough,share).
mark(3,buy,to).
advcl:to(3,have,buy).
det(3,gown,a).
amod(3,gown,new).
dobj(3,buy,gown).
% relations.
shall_have(3,i,money).
will_fetch(3,poultry,highest_price).
shall_have_enough(3,i,money).
buy(3,i,gown).
buy(3,i,new_gown).
will_fetch(3,poultry,price).
shall_have_money_enough_by(3,i,end_of_year).
shall_have_money_enough_by(3,i,end).
shall_have_money_by(3,i,end_of_year).
will_become(3,chicken,ready_for_market).
will_become(3,chicken,ready).
shall_have_money_by(3,i,end).
%% in this dress i will go to the christmas parties where all the young fellows will propose to me but i will toss my head and refuse them every one.
% dependencies.
root(4,root,go).
case(4,dress,in).
det(4,dress,this).
nmod:in(4,go,dress).
nsubj(4,go,i).
aux(4,go,will).
case(4,party,to).
det(4,party,the).
compound(4,party,christmas).
nmod:to(4,go,party).
advmod(4,propose,where).
det:predet(4,fellow,all).
det(4,fellow,the).
amod(4,fellow,young).
nsubj(4,propose,fellow).
aux(4,propose,will).
advcl(4,go,propose).
case(4,I,to).
nmod:to(4,propose,I).
cc(4,propose,but).
nsubj(4,toss,i).
nsubj(4,refuse,i).
aux(4,toss,will).
advcl(4,go,toss).
conj:but(4,propose,toss).
nmod:poss(4,head,my).
dobj(4,toss,head).
cc(4,toss,and).
conj:but(4,propose,refuse).
conj:and(4,toss,refuse).
nsubj(4,one,they).
det(4,one,every).
xcomp(4,refuse,one).
% relations.
will_propose_to(4,young_fellow,I).
will_go_in(4,i,dress).
will_toss(4,i,my_head).
will_go_to(4,i,christmas_party).
%% at this moment she tossed her head in unison with her thoughts when down fell the milk pail to the ground and all her imaginary schemes perished in a moment.
% dependencies.
root(5,root,toss).
case(5,moment,at).
det(5,moment,this).
nmod:at(5,toss,moment).
nsubj(5,toss,she).
nmod:poss(5,head,she).
dobj(5,toss,head).
case(5,unison,in).
nmod:in(5,toss,unison).
case(5,thought,with).
nmod:poss(5,thought,she).
nmod:with(5,toss,thought).
advmod(5,down,when).
advmod(5,fall,down).
advcl(5,toss,fall).
det(5,pail,the).
compound(5,pail,milk).
dobj(5,fall,pail).
case(5,ground,to).
det(5,ground,the).
nmod:to(5,fall,ground).
cc(5,fall,and).
dobj(5,perish,all).
nmod:poss(5,scheme,she).
amod(5,scheme,imaginary).
nsubj(5,perish,scheme).
advcl(5,toss,perish).
conj:and(5,fall,perish).
case(5,moment,in).
det(5,moment,a).
nmod:in(5,perish,moment).
% relations.
fall(5,she,milk_pail).
when_down_fall_to(5,she,ground).
down_fall_milk_pail_to(5,she,ground).
down_fall(5,she,milk_pail).
when_down_fall(5,she,milk_pail).
fall_to(5,she,ground).
perish(5,she_imaginary_scheme,all).
when_down_fall_milk_pail_to(5,she,ground).
down_fall_to(5,she,ground).
fall_milk_pail_to(5,she,ground).
toss(5,she,she_head).
perish_in(5,she_imaginary_scheme,moment).
