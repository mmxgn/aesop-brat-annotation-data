root(0,ROOT,uprooted).
det(0,oak,a).
advmod(0,large,very).
amod(0,oak,large).
nsubjpass(0,uprooted,oak).
nsubjpass(0,thrown,oak).
auxpass(0,uprooted,was).
case(0,wind,by).
det(0,wind,the).
nmod:agent(0,uprooted,wind).
cc(0,uprooted,and).
conj:and(0,uprooted,thrown).
case(0,stream,across).
det(0,stream,a).
nmod:across(0,thrown,stream).
was(0,large_oak,uprooted).
was_uprooted_by(0,oak,wind).
thrown_across(0,large_oak,stream).
was_uprooted_by(0,large_oak,wind).
was(0,oak,uprooted).
thrown_across(0,oak,stream).
root(1,ROOT,fell).
nsubj(1,fell,it).
case(1,reeds,among).
det(1,reeds,some).
nmod:among(1,fell,reeds).
dobj(1,addressed,which).
nsubj(1,addressed,it).
advmod(1,addressed,thus).
ccomp(1,fell,addressed).
fell_among(1,it,reeds).
root(2,ROOT,wonder).
advmod(2,wonder,i).
advmod(2,crushed,how).
nsubj(2,light,you).
nsubj(2,weak,you).
nsubjpass(2,crushed,you).
ref(2,you,who).
cop(2,light,are).
advmod(2,light,so).
acl:relcl(2,you,light).
cc(2,light,and).
acl:relcl(2,you,weak).
conj:and(2,light,weak).
auxpass(2,crushed,are).
neg(2,crushed,not).
advmod(2,crushed,entirely).
ccomp(2,wonder,crushed).
case(2,winds,by).
det(2,winds,these).
amod(2,winds,strong).
nmod:agent(2,crushed,winds).
root(3,ROOT,replied).
nsubj(3,replied,they).
root(4,ROOT,fight).
nsubj(4,fight,you).
nsubj(4,contend,you).
cc(4,fight,and).
conj:and(4,fight,contend).
case(4,wind,with).
det(4,wind,the).
nmod:with(4,fight,wind).
cc(4,fight,and).
advmod(4,destroyed,consequently).
nsubjpass(4,destroyed,you).
auxpass(4,destroyed,are).
conj:and(4,fight,destroyed).
are(4,you,consequently_destroyed).
are(4,you,destroyed).
fight_with(4,you,wind).
root(5,ROOT,bend).
mark(5,bend,while).
nsubj(5,bend,we).
nsubj(5,remain,we).
case(5,bend,on).
det(5,bend,the).
amod(5,bend,contrary).
case(5,breath,before).
det(5,breath,the).
amod(5,breath,least).
nmod:before(5,bend,breath).
case(5,air,of).
nmod:of(5,breath,air).
cc(5,bend,and).
advmod(5,remain,therefore).
conj:and(5,bend,remain).
xcomp(5,remain,unbroken).
cc(5,unbroken,and).
xcomp(5,remain,escape).
conj:and(5,unbroken,escape).
remain(5,we,unbroken).
therefore_remain(5,we,unbroken).
root(6,ROOT,stoop).
mark(6,conquer,to).
dep(6,stoop,conquer).
