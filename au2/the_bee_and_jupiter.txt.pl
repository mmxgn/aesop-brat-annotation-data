root(0,ROOT,bee).
det(0,bee,a).
mark(0,mount,from).
dep(0,bee,mount).
dobj(0,mount,hymettus).
det(0,queen,the).
nsubj(0,ascended,queen).
case(0,hive,of).
det(0,hive,the).
nmod:of(0,queen,hive).
dep(0,mount,ascended).
case(0,olympus,to).
nmod:to(0,ascended,olympus).
case(0,jupiter,to).
amod(0,jupiter,present).
nmod:to(0,ascended,jupiter).
det(0,honey,some).
dobj(0,ascended,honey).
amod(0,honey,fresh).
case(0,combs,from).
nmod:poss(0,combs,her).
nmod:from(0,fresh,combs).
ascended_honey_to(0,queen,olympus).
ascended_honey_to(0,queen,jupiter).
ascended(0,queen,honey_fresh).
queen_of(0,honey,hive).
ascended_honey_to(0,queen,present_jupiter).
fresh_from(0,honey,her_combs).
queen_of(0,honey_fresh,hive).
ascended(0,queen,honey_fresh_from_her_combs).
ascended(0,queen,honey).
root(1,ROOT,promised).
nsubj(1,promised,jupiter).
nsubj:xsubj(1,give,jupiter).
amod(1,jupiter,delighted).
case(1,offering,with).
det(1,offering,the).
nmod:with(1,delighted,offering).
case(1,honey,of).
nmod:of(1,offering,honey).
mark(1,give,to).
xcomp(1,promised,give).
dobj(1,ask,whatever).
nsubj(1,ask,she).
aux(1,ask,should).
ccomp(1,give,ask).
promised(1,jupiter,give).
promised(1,jupiter_delighted,give).
delighted_with(1,jupiter,offering).
delighted_with(1,jupiter,offering_of_honey).
root(2,ROOT,besought).
nsubj(2,besought,she).
advmod(2,besought,therefore).
dobj(2,besought,him).
xcomp(2,besought,saying).
therefore_besought(2,she,him).
besought(2,she,him).
root(3,ROOT,give).
iobj(3,give,me).
compound(3,pray,i).
dobj(3,give,pray).
nsubj(3,give,thee).
det(3,sting,a).
dep(3,thee,sting).
mark(3,kill,that).
mark(3,approach,if).
det(3,mortal,any).
nsubj(3,approach,mortal).
nsubj:xsubj(3,take,mortal).
aux(3,approach,shall).
advcl:if(3,kill,approach).
mark(3,take,to).
xcomp(3,approach,take).
nmod:poss(3,honey,my).
dobj(3,take,honey).
nsubj(3,kill,i).
aux(3,kill,may).
dep(3,thee,kill).
dobj(3,kill,him).
root(4,ROOT,displeased).
nsubj(4,displeased,jupiter).
cop(4,displeased,was).
amod(4,displeased,much).
mark(4,loved,for).
nsubj(4,loved,he).
nsubj(4,refuse,he).
ccomp(4,displeased,loved).
det(4,race,the).
dobj(4,loved,race).
case(4,man,of).
nmod:of(4,race,man).
cc(4,loved,but).
aux(4,refuse,could).
neg(4,refuse,not).
ccomp(4,displeased,refuse).
conj:but(4,loved,refuse).
det(4,request,the).
dobj(4,refuse,request).
case(4,promise,because).
case(4,promise,of).
nmod:poss(4,promise,his).
nmod:of(4,refuse,promise).
race_of(4,he,man).
was(4,jupiter,much_displeased).
was(4,jupiter,displeased).
root(5,ROOT,answered).
nsubj(5,answered,he).
advmod(5,answered,thus).
det(5,bee,the).
dobj(5,answered,bee).
answered(5,he,bee).
thus_answered(5,he,bee).
root(6,ROOT,have).
nsubj(6,have,you).
aux(6,have,shall).
nmod:poss(6,request,your).
dobj(6,have,request).
cc(6,peril,but).
nsubj(6,peril,it).
aux(6,peril,will).
cop(6,peril,be).
case(6,peril,at).
det(6,peril,the).
dep(6,have,peril).
case(6,life,of).
nmod:poss(6,life,your).
amod(6,life,own).
nmod:of(6,peril,life).
shall_have(6,you,your_request).
root(7,ROOT,make).
mark(7,make,for).
mark(7,use,if).
nsubj(7,use,you).
advcl:if(7,make,use).
nmod:poss(7,sting,your).
dobj(7,use,sting).
nsubj(7,remain,it).
aux(7,remain,shall).
acl:relcl(7,sting,remain).
case(7,wound,in).
det(7,wound,the).
nmod:in(7,remain,wound).
nsubj(7,make,you).
cc(7,make,and).
advmod(7,die,then).
nsubj(7,die,you).
aux(7,die,will).
conj:and(7,make,die).
case(7,loss,from).
det(7,loss,the).
nmod:from(7,die,loss).
case(7,it,of).
nmod:of(7,loss,it).
will_die_from(7,you,loss_of_it).
will_die_from(7,you,loss).
shall_remain_in(7,it,wound).
