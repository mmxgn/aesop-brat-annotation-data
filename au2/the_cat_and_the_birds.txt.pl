%% a cat hearing that the birds in a certain aviary were ailing dressed himself up as a physician and taking his cane and a bag of instruments becoming his profession went to call on them.
% dependencies.
root(0,root,hearing).
det(0,hearing,a).
compound(0,hearing,cat).
mark(0,ail,that).
det(0,bird,the).
nsubj(0,ail,bird).
case(0,aviary,in).
det(0,aviary,a).
amod(0,aviary,certain).
nmod:in(0,bird,aviary).
cop(0,ail,be).
dep(0,hearing,ail).
dep(0,ail,dress).
dobj(0,dress,himself).
compound:prt(0,dress,up).
case(0,physician,as).
det(0,physician,a).
nmod:as(0,dress,physician).
cc(0,dress,and).
dep(0,ail,take).
conj:and(0,dress,take).
nmod:poss(0,cane,he).
dobj(0,take,cane).
cc(0,ail,and).
det(0,bag,a).
nsubj(0,go,bag).
nsubj:xsubj(0,call,bag).
case(0,instrument,of).
nmod:of(0,bag,instrument).
acl(0,instrument,become).
nmod:poss(0,profession,he).
xcomp(0,become,profession).
dep(0,hearing,go).
conj:and(0,ail,go).
mark(0,call,to).
xcomp(0,go,call).
case(0,they,on).
nmod:on(0,call,they).
% relations.
go(0,bag,call).
is_in(0,bird,certain_aviary).
take(0,himself,he_cane).
call_on(0,bag,they).
go(0,bag,call_on_they).
%% he knocked at the door and inquired of the inmates how they all did saying that if they were ill he would be happy to prescribe for them and cure them.
% dependencies.
root(1,root,knock).
nsubj(1,knock,he).
nsubj(1,inquire,he).
case(1,door,at).
det(1,door,the).
nmod:at(1,knock,door).
cc(1,knock,and).
conj:and(1,knock,inquire).
case(1,inmate,of).
det(1,inmate,the).
nmod:of(1,inquire,inmate).
advmod(1,do,how).
nsubj(1,do,they).
advmod(1,do,all).
ccomp(1,inquire,do).
xcomp(1,do,say).
mark(1,happy,that).
mark(1,ill,if).
nsubj(1,ill,they).
cop(1,ill,be).
advcl:if(1,happy,ill).
nsubj(1,happy,he).
nsubj:xsubj(1,prescribe,he).
nsubj:xsubj(1,cure,he).
aux(1,happy,would).
cop(1,happy,be).
ccomp(1,say,happy).
mark(1,prescribe,to).
xcomp(1,happy,prescribe).
case(1,they,for).
nmod:for(1,prescribe,they).
cc(1,prescribe,and).
xcomp(1,happy,cure).
conj:and(1,prescribe,cure).
dobj(1,cure,they).
% relations.
all_do(1,they,say).
knock_at(1,he,door).
inquire_of(1,he,inmate).
do(1,they,say).
%% they replied.
% dependencies.
root(2,root,reply).
nsubj(2,reply,they).
% relations.
%% we are all very well and shall continue so if you will only be good enough to go away and leave us as we are.
% dependencies.
root(3,root,well).
nsubj(3,well,we).
nsubj(3,continue,we).
cop(3,well,be).
advmod(3,well,all).
advmod(3,well,very).
cc(3,well,and).
aux(3,continue,shall).
conj:and(3,well,continue).
advmod(3,good,so).
mark(3,good,if).
nsubj(3,good,you).
nsubj:xsubj(3,go,you).
nsubj:xsubj(3,leave,you).
aux(3,good,will).
advmod(3,good,only).
cop(3,good,be).
advcl:if(3,continue,good).
advmod(3,good,enough).
mark(3,go,to).
xcomp(3,good,go).
advmod(3,go,away).
cc(3,go,and).
xcomp(3,good,leave).
conj:and(3,go,leave).
dobj(3,leave,we).
mark(3,be,as).
nsubj(3,be,we).
advcl:as(3,leave,be).
% relations.
continue(3,we,will_only_good_enough).
will(3,you,will_only_good_enough).
be(3,we,well).
will(3,you,so_will_good).
continue(3,we,so_will_only_good_enough).
be(3,we,all_well).
will(3,you,will_only_good).
continue(3,we,will_good_enough).
continue(3,we,will_only_good).
be(3,we,all_very_well).
will(3,you,so_will_only_good_enough).
will(3,you,will_good_enough).
continue(3,we,so_will_good).
will(3,you,so_will_only_good).
continue(3,we,so_will_only_good).
continue(3,we,so_will_good_enough).
continue(3,we,will_good).
be(3,we,very_well).
will(3,you,will_good).
will(3,you,so_will_good_enough).
