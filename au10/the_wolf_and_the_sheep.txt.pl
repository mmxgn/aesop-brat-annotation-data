root(0,ROOT,wounded).
det(0,wolf,a).
nsubj(0,wounded,wolf).
nsubj(0,bitten,wolf).
nsubj(0,maimed,wolf).
advmod(0,wounded,sorely).
cc(0,wounded,and).
conj:and(0,wounded,bitten).
case(0,dogs,by).
nmod:by(0,wounded,dogs).
acl:relcl(0,dogs,lay).
xcomp(0,lay,sick).
cc(0,wounded,and).
conj:and(0,wounded,maimed).
case(0,lair,in).
nmod:poss(0,lair,his).
nmod:in(0,maimed,lair).
maimed_in(0,wolf,his_lair).
root(1,ROOT,being).
mark(1,want,in).
advcl:in(1,being,want).
case(1,food,of).
nmod:of(1,called,food).
nsubj(1,called,he).
nsubj(1,asked,he).
ccomp(1,want,called).
case(1,sheep,to).
det(1,sheep,a).
nmod:to(1,called,sheep).
nsubj(1,passing,sheep).
ref(1,sheep,who).
aux(1,passing,was).
acl:relcl(1,sheep,passing).
cc(1,called,and).
ccomp(1,want,asked).
conj:and(1,called,asked).
dobj(1,asked,him).
nsubj:xsubj(1,fetch,him).
mark(1,fetch,to).
xcomp(1,asked,fetch).
det(1,water,some).
dobj(1,fetch,water).
case(1,stream,from).
det(1,stream,a).
nmod:from(1,fetch,stream).
acl(1,stream,flowing).
advmod(1,flowing,close).
case(1,him,beside).
nmod:beside(1,flowing,him).
fetch_water_from(1,him,stream_flowing_close_beside_him).
asked(1,he,him).
called_of(1,he,food).
fetch_water_from(1,him,stream).
fetch_water_from(1,him,stream_flowing_beside_him).
fetch(1,him,water).
fetch_water_from(1,him,stream_flowing).
fetch_water_from(1,him,stream_flowing_close).
root(2,ROOT,for).
root(3,ROOT,said).
nsubj(3,said,he).
root(4,ROOT,bring).
mark(4,bring,if).
nsubj(4,bring,you).
aux(4,bring,will).
nsubj(4,drink,me).
ccomp(4,bring,drink).
nsubj(4,find,i).
aux(4,find,will).
ccomp(4,drink,find).
dobj(4,find,means).
nsubj:xsubj(4,provide,means).
mark(4,provide,to).
xcomp(4,find,provide).
dobj(4,provide,myself).
case(4,meat,with).
nmod:with(4,provide,meat).
find(4,i,means).
provide(4,means,myself).
root(5,ROOT,yes).
root(6,ROOT,said).
det(6,sheep,the).
nsubj(6,said,sheep).
root(7,ROOT,bring).
mark(7,bring,if).
nsubj(7,bring,i).
aux(7,bring,should).
iobj(7,bring,you).
det(7,draught,the).
dobj(7,bring,draught).
nsubj(7,doubtless,you).
aux(7,doubtless,would).
acl:relcl(7,draught,doubtless).
xcomp(7,doubtless,make).
nsubj(7,provide,me).
ccomp(7,make,provide).
det(7,meat,the).
dobj(7,provide,meat).
advmod(7,provide,also).
provide(7,me,meat).
should_bring(7,i,you).
provide_also(7,me,meat).
would_doubtless(7,you,make).
